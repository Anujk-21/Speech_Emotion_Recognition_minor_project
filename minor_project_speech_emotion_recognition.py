# -*- coding: utf-8 -*-
"""minor project_speech_emotion_recognition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uTvpReCznk3B1kpoFO3fjzhS16pKHppO

Anuj Karoddeo & Team \n

Minor Project \n

GHRIET Nagpur
"""

#pip install librosa==0.9.1 #Librosa is a library that is used for analyzing the behavior of audio

import os

#from google.colab import drive
#drive.mount('/content/gdrive')

Root = open("C:\Users\anujk\OneDrive\Desktop\project\speech-emotion-recognition-data")
os.chdir(Root) #used to change the current working directory to specified path

ls

import librosa #Python library for audio and music analysis
import soundfile
import os, glob, pickle #the glob module is used to retrieve files
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier #multi-layer perceptron (MLP) algorithm that trains using Backpropagation
from sklearn.metrics import accuracy_score

"""```

Mel-frequency cepstral coefficients (MFCCs) are a feature widely used in automatic speech and speaker recognition,

Chroma feature is a descriptor, which represents the tonal content of a musical audio signal in a condensed form.

melSpectrogram applies a frequency-domain filter bank to audio signals that are windowed in time.

```

[Feature Extraction Info](https://jonathan-hui.medium.com/speech-recognition-feature-extraction-mfcc-plp-5455f5a69dd9)
"""

#Extract features (mfcc, chroma, mel) from a sound file
def extract_feature(file_name, mfcc, chroma, mel): #Mel-frequency cepstral coefficients (MFCCs) are a feature widely used in automatic speech and speaker recognition,chroma feature is a descriptor, which represents the tonal content of a musical audio signal in a condensed form.
    with soundfile.SoundFile(file_name) as sound_file:
        X = sound_file.read(dtype="float32")
        sample_rate=sound_file.samplerate
        if chroma:
            stft=np.abs(librosa.stft(X))
        result=np.array([])
        if mfcc:
            mfccs=np.mean(librosa.feature.mfcc(y=X, sr=sample_rate, n_mfcc=40).T, axis=0)
            result=np.hstack((result, mfccs))
        if chroma:
            chroma=np.mean(librosa.feature.chroma_stft(S=stft, sr=sample_rate).T,axis=0)
            result=np.hstack((result, chroma))
        if mel:
            mel=np.mean(librosa.feature.melspectrogram(X, sr=sample_rate).T,axis=0)
            result=np.hstack((result, mel))
    return result

# Emotions in the dataset
emotions={
  '01':'neutral',
  '02':'calm',
  '03':'happy',
  '04':'sad',
  '05':'angry',
  '06':'fearful',
  '07':'disgust',
  '08':'surprised'
}

#Emotions to observe
observed_emotions=['calm', 'happy', 'fearful', 'disgust']

#Load the data and extract features for each sound file
def load_data(test_size=0.2):
    x,y=[],[]
    for file in glob.glob("/content/gdrive/MyDrive/Colab Notebooks/speech-emotion-recognition-data/Actor_*/*.wav"):
        file_name=os.path.basename(file)
        emotion=emotions[file_name.split("-")[2]]
        if emotion not in observed_emotions:
            continue
        feature=extract_feature(file, mfcc=True, chroma=True, mel=True)
        x.append(feature)
        y.append(emotion)
    return train_test_split(np.array(x), y, test_size=test_size, random_state=9)

#Split the dataset
x_train,x_test,y_train,y_test=load_data(test_size=0.25)

x_train

#Get the shape of the training and testing datasets
print((x_train.shape[0], x_test.shape[0]))

#Get the number of features extracted
print(f'Features extracted: {x_train.shape[1]}')

#Initialize the Multi Layer Perceptron Classifier
model=MLPClassifier(alpha=0.01, batch_size=256, epsilon=1e-08, hidden_layer_sizes=(300,), learning_rate='adaptive', max_iter=500)

#Train the model
model.fit(x_train,y_train)

#Predict for the test set
y_pred=model.predict(x_test)

y_pred

#Calculate the accuracy of our model
accuracy=accuracy_score(y_true=y_test, y_pred=y_pred)

#Print the accuracy
print("Accuracy: {:.2f}%".format(accuracy*100))

from sklearn.metrics import accuracy_score, f1_score

f1_score(y_test, y_pred,average=None)

import pandas as pd
df=pd.DataFrame({'Actual': y_test, 'Predicted':y_pred})
df.head(10)

df['Actual'].value_counts()

df['Actual'].value_counts()

df['Actual'].value_counts().plot(kind='barh',color='orange')

df['Predicted'].value_counts().plot(kind='barh')

import pickle
# Writing different model files to file
with open( 'modelForPrediction1.sav', 'wb') as f:
    pickle.dump(model,f)

feature

filename = 'modelForPrediction1.sav'
loaded_model = pickle.load(open(filename, 'rb')) # loading the model file from the storage

feature=extract_feature("/content/gdrive/MyDrive/Colab Notebooks/speech-emotion-recognition-data/Actor_09/03-01-03-01-02-02-09.wav", mfcc=True, chroma=True, mel=True)

feature=feature.reshape(1,-1)

prediction=loaded_model.predict(feature)
prediction

def Output():

  if prediction == 'calm':
    print(prediction, " is the emotion that recognised by Model with ",accuracy*100 ,"%")
    print("🙂🙂🙂🙂🙂🙂")
  elif prediction == 'happy':
    print(prediction, " is the emotion that recognised by Model with ",accuracy*100 ,"%")
    print("😁😁😁😁😁😁")
  elif prediction == 'fearful':
    print(prediction, " is the emotion that recognised by Model with ",accuracy*100 ,"%")
    print("😨😨😨😨😨😨")
  else:
    print(prediction, " is the emotion that recognised by Model with ",accuracy*100 ,"%")
    print("😒😒😒😒😒😒")

Output()

#print(prediction, " is the emotion that recognised by Model with ",accuracy*100 ,"%")